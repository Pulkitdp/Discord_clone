{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","signOut","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fd799dc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null,\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n        state.channelId = action.payload.channelId;\r\n        state.channelName = action.payload.channelName;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId  = (state) => state.app.channelId;\r\nexport const selectChannelName  = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;","import React from 'react';\r\nimport './SidebarChannel.css';\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div\r\n            className=\"sidebarChannel\"\r\n            onClick={() =>\r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: id,\r\n                        channelName: channelName,\r\n                    })\r\n                )\r\n            }\r\n        >\r\n            <h4><span className=\"sidebarChannel_hash\">#</span>\r\n                {channelName}\r\n            </h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    }\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\nexport const selectUser  = (state) => state.user.user;\nexport default userSlice.reducer;","import firebase from 'firebase';\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCLmVEwpDP1K_153L21b3WviUXLmzkRxaE\",\r\n  authDomain: \"discord-clone-dp.firebaseapp.com\",\r\n  projectId: \"discord-clone-dp\",\r\n  storageBucket: \"discord-clone-dp.appspot.com\",\r\n  messagingSenderId: \"199913126808\",\r\n  appId: \"1:199913126808:web:eae461c34e953c8be9c9ed\",\r\n  measurementId: \"G-JBNK4W4NSK\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n// eslint-disable-next-line\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport {auth, provider};\r\nexport default db;","import React, { useEffect, useState }from 'react';\r\nimport './Sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel'\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport { Avatar } from '@material-ui/core';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport db, {auth} from './firebase';\r\n\r\nfunction Sidebar(){\r\n    const user = useSelector(selectUser);\r\n    const [channels, setChannels] = useState([]);\r\n\r\n    useEffect(() => {\r\n        db.collection('channels').onSnapshot(snapshot => {\r\n            setChannels(\r\n                snapshot.docs.map((doc) => ({\r\n                    id: doc.id,\r\n                    channel: doc.data()\r\n                }))\r\n            )\r\n        })\r\n    }, [])\r\n\r\n    const handleAddChannel = () => {\r\n        const channelName = prompt(\"Enter a new channel name\");\r\n        if(channelName){\r\n            db.collection(\"channels\").add({\r\n                channelName: channelName,\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>Discord Clone</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n\r\n            <div className=\"sidebar_channels\">\r\n                <div className=\"sidebar_channelsHeader\">\r\n                    <div className=\"sidebar_header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Text Channels</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar_addchannel\" />\r\n                </div>\r\n            \r\n                <div className=\"sidebar_channelList\">\r\n                    {channels.map(({ id, channel }) => (\r\n                        <SidebarChannel \r\n                            key={id} \r\n                            id={id} \r\n                            channelName={channel.channelName}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar_voice\">\r\n                <SignalCellularAltIcon \r\n                    className = \"sidebar_voiceIcon\"\r\n                    fontSize = \"large\"\r\n                />\r\n                <div className=\"sidebar_voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n                <div className=\"sidebar_voiceIcons\">\r\n                    <InfoOutlinedIcon />\r\n                    <CallIcon />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar_profile\">\r\n                <Avatar onClick={() => auth.signOut()} \r\n                    src = {user.photo} />\r\n                <div className=\"sidebar_profileInfo\">\r\n                    <h3>{user.displayName}</h3>\r\n                    <p>#{user.uid.substring(0, 5)}</p>\r\n                </div>\r\n                <div className=\"sidebar_profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationIcon from '@material-ui/icons/EditLocation';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({ channelName }) {\r\n    return (\r\n        <div className = \"chatHeader\">\r\n            <div className = \"chatHeader_left\">\r\n                <h3>\r\n                    <span className = \"chatHeader_hash\">\r\n                        #\r\n                    </span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"chatHeader_right\">\r\n                <NotificationsIcon/>\r\n                <EditLocationIcon/>\r\n                <PeopleAltRoundedIcon/>\r\n                <div className=\"chatHeader_search\">\r\n                    <input placeholder = \"Search\" />\r\n                    <SearchRoundedIcon />\r\n                </div>\r\n                <SendRoundedIcon />\r\n                <HelpRoundedIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader;","import React from 'react';\r\nimport { Avatar } from '@material-ui/core';\r\nimport './Message.css';\r\n\r\nfunction Message({timestamp, message, user }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo}/>\r\n            <div className=\"message_info\">\r\n                <h4>\r\n                    {user.displayName}\r\n                    <span className=\"message_timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, { useState, useEffect } from 'react';\r\nimport './Chat.css'\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleRoundedIcon from '@material-ui/icons/AddCircleRounded';\r\nimport CardGiftcardRoundedIcon from '@material-ui/icons/CardGiftcardRounded';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChannelId, selectChannelName } from './features/appSlice';\r\nimport { selectUser } from './features/userSlice';\r\nimport db from \"./firebase\";\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n    const user = useSelector(selectUser);\r\n    const channelId = useSelector(selectChannelId);\r\n    const channelName = useSelector(selectChannelName);\r\n    const [input, setInput] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (channelId) {\r\n            db.collection(\"channels\")\r\n                .doc(channelId)\r\n                .collection(\"messages\")\r\n                .orderBy(\"timestamp\", \"desc\")\r\n                .onSnapshot((snapshot) =>\r\n                    setMessages(snapshot.docs.map((doc) => doc.data()))\r\n                );\r\n        }\r\n    }, [channelId]);\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection(\"channels\").doc(channelId)\r\n            .collection(\"messages\")\r\n            .add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                message: input,\r\n                user: user,\r\n            });\r\n\r\n        setInput(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <ChatHeader channelName={channelName} />\r\n            <div className=\"chatMessages\">\r\n                {messages.map(message =>\r\n                    <Message \r\n                        timestamp = {message.timestamp}\r\n                        message = {message.message}\r\n                        user = {message.user}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className=\"chatInput\">\r\n                <AddCircleRoundedIcon />\r\n                <form>\r\n                    <input\r\n                        value={input}\r\n                        disabled={!channelId}\r\n                        onChange={e => setInput(e.target.value)}\r\n                        placeholder={`Message #${channelName}`} />\r\n                    <button\r\n                        disabled={!channelId}\r\n                        className=\"chatButton\"\r\n                        type=\"submit\"\r\n                        onClick={sendMessage}>\r\n                        Send Message\r\n                    </button>\r\n                </form>\r\n\r\n                <div className=\"chat_inputIcons\">\r\n                    <CardGiftcardRoundedIcon fontSize=\"large\" />\r\n                    <GifIcon fontSize=\"large\" />\r\n                    <EmojiEmotionsIcon fontSize=\"large\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport { \r\n    auth,\r\n    provider\r\n} from './firebase';\r\nimport './Login.css'\r\n\r\nfunction Login() {\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n        .catch((error) => alert(error.message))\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login_logo\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/en/thumb/9/98/Discord_logo.svg/1024px-Discord_logo.svg.png\" alt=\"Discord\"/>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\nimport { selectUser } from './features/userSlice';\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux';\nimport Login from './Login';\nimport {\n  auth,\n} from './firebase';\nimport {\n  login,\n  logout\n} from './features/userSlice';\n\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName\n        }))\n      }\n      else {\n        dispatch(logout())\n      }\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ) : (\n        <Login />\n      )\n      }\n    </div>\n  );\n}\n\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}